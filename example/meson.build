# Copyright (c) 2014-2022 Philipp Kerling, Nils Christopher Brause
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# dependencies

# This meson file was automatically generated and it is untested.

# Threads_dep = dependency('Threads')
# OpenGL_dep = dependency('OpenGL')
# # pkg_check_modules(['EGL', 'REQUIRED', 'egl'])
# librt = find_library('LIBRT')
# # mark_as_advanced('LIBRT')
# # examples
# dump_exe = executable('dump', 'dump.cpp')
# # target_link_libraries(['dump', 'wayland-client++'])
# egl_exe = executable('egl', 'egl.cpp')
# # target_link_libraries(['egl', 'wayland-client++', 'wayland-client-extra++', 'wayland-cursor++', 'wayland-egl++', '${OPENGL_LIBRARY}', egl_ldflags])
# # target_include_directories(['egl', 'PUBLIC', '${OPENGL_INCLUDE_DIR}'])
# # target_compile_options(['egl', 'PUBLIC', egl_cflags])
# foreign_display_exe = executable('foreign_display', 'foreign_display.cpp')
# # target_link_libraries(['foreign_display', 'wayland-client++'])
# proxy_wrapper_exe = executable('proxy_wrapper', 'proxy_wrapper.cpp')
# # target_link_libraries(['proxy_wrapper', 'wayland-client++', 'Threads::Threads'])
# shm_exe = executable('shm', 'shm.cpp')
# # target_link_libraries(['shm', 'wayland-client++', 'wayland-client-extra++', 'wayland-cursor++'])
# if 'BUILD_SERVER'
#   wayland_scannerpp = 'wayland-scanner++'
#   proto_xml = '${CMAKE_SOURCE_DIR}/example/pingpong.xml'
#   client_proto_files = ['pingpong-client-protocol.hpp', 'pingpong-client-protocol.cpp']
#   server_proto_files = ['pingpong-server-protocol.hpp', 'pingpong-server-protocol.cpp']
#   # add_custom_command(['OUTPUT', client_proto_files, 'COMMAND', '${WAYLAND_SCANNERPP}', proto_xml, client_proto_files, 'DEPENDS', '${WAYLAND_SCANNERPP}', proto_xml])
#   # add_custom_command(['OUTPUT', server_proto_files, 'COMMAND', '${WAYLAND_SCANNERPP}', '-s', 'on', proto_xml, server_proto_files, 'DEPENDS', '${WAYLAND_SCANNERPP}', proto_xml])
#   pingpong_exe = executable('pingpong', 'pingpong.cpp', 'pingpong-client-protocol.cpp', 'pingpong-server-protocol.cpp')
#   # target_link_libraries(['pingpong', 'wayland-client++', 'wayland-server++', 'Threads::Threads'])
#   # target_include_directories(['pingpong', 'PUBLIC', cmake_current_binary_dir])
# endif
# if 'LIBRT'
#   # target_link_libraries(['shm', '${LIBRT}'])
# endif
